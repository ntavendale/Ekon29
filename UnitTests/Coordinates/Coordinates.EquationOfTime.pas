unit Coordinates.EquationOfTime;

interface

uses
  System.DateUtils;

const EquationOfTimeData: array [0..364, 0..1] of ShortInt = ((-3, 41), (-4, 9),
                         (-4, 37), (-5, 4), (-5, 31), (-5, 57), (-6, 23), (-6, 48),
                         (-7, 13), (-7, 37), (-8, 1), (-8, 24), (-8, 47), (-9, 8),
                         (-9, 30), (-9, 50), (-10, 10), (-10, 29), (-10, 48), (-11, 5),
                         (-11, 23), (-11, 39), (-11, 54), (-12, 9), (-12, 23), (-12, 36),
                         (-12, 48), (-12, 59), (-13, 10), (-13, 20), (-13, 29), (-13, 37),
                         (-13, 44), (-13, 51), (-13, 56), (-14, 1), (-14, 5), (-14, 9),
                         (-14, 11), (-14, 13), (-14, 13), (-14, 14), (-14, 13), (-14, 11),
                         (-14, 9), (-14, 6), (-14, 3), (-13, 58), (-13, 53), (-13, 47),
                         (-13, 41), (-13, 34), (-13, 26), (-13, 18), (-13, 9), (-12, 59),
                         (-12, 49), (-12, 39), (-12, 27), (-12, 16), (-12, 3), (-11, 51),
                         (-11, 38), (-11, 24), (-11, 10), (-10, 56), (-10, 41), (-10, 26),
                         (-10, 10), (-9, 54), (-9, 38), (-9, 22), (-9, 5), (-8, 48),
                         (-8, 31), (-8, 14), (-7, 57), (-7, 39), (-7, 21), (-7, 3),
                         (-6, 46), (-6, 28), (-6, 9), (-5, 51), (-5, 33), (-5, 15),
                         (-4, 57), (-4, 39), (-4, 21), (-4, 3), (-3, 45), (-3, 28),
                         (-3, 10), (-2, 53), (-2, 36), (-2, 19), (-2, 2), (-1, 45),
                         (-1, 29), (-1, 13), (0, -57), (0, -42), (0, -27), (0, -12),
                         (0, 2), (0, 16), (0, 30), (0, 44), (0, 56), (1, 9),
                         (1, 21), (1, 33), (1, 44), (1, 55), (2, 5), (2, 15),
                         (2, 24), (2, 33), (2, 41), (2, 49), (2, 56), (3, 2),
                         (3, 8), (3, 14), (3, 19), (3, 23), (3, 27), (3, 31),
                         (3, 33), (3, 35), (3, 37), (3, 38), (3, 38), (3, 38),
                         (3, 38), (3, 36), (3, 35), (3, 32), (3, 29), (3, 26),
                         (3, 22), (3, 17), (3, 12), (3, 7), (3, 1), (2, 54),
                         (2, 47), (2, 40), (2, 32), (2, 23), (2, 15), (2, 6),
                         (1, 56), (1, 46), (1, 36), (1, 25), (1, 14), (1, 3),
                         (0, 52), (0, 40), (0, 28), (0, 16), (0, 3), (0, -9),
                         (0, -22), (0, -35), (0, -48), (-1, 1), (-1, 14), (-1, 27),
                         (-1, 40), (-1, 53), (-2, 6), (-2, 19), (-2, 32), (-2, 44),
                         (-2, 57), (-3, 10), (-3, 22), (-3, 34), (-3, 46), (-3, 57),
                         (-4, 9), (-4, 20), (-4, 30), (-4, 41), (-4, 51), (-5, 1),
                         (-5, 10), (-5, 19), (-5, 27), (-5, 35), (-5, 43), (-5, 50),
                         (-5, 56), (-6, 3), (-6, 8), (-6, 13), (-6, 18), (-6, 22),
                         (-6, 25), (-6, 28), (-6, 30), (-6, 32), (-6, 33), (-6, 34),
                         (-6, 34), (-6, 33), (-6, 32), (-6, 30), (-6, 28), (-6, 24),
                         (-6, 21), (-6, 16), (-6, 12), (-6, 6), (-5, 60), (-5, 53),
                         (-5, 46), (-5, 38), (-5, 30), (-5, 21), (-5, 11), (-5, 1),
                         (-4, 50), (-4, 39), (-4, 27), (-4, 15), (-4, 2), (-3, 49),
                         (-3, 35), (-3, 20), (-3, 6), (-2, 50), (-2, 35), (-2, 19),
                         (-2, 2), (-1, 45), (-1, 28), (-1, 10), (0, -52), (0, -34),
                         (0, -15), (0, 4), (0, 23), (0, 43), (1, 2), (1, 22),
                         (1, 43), (2, 3), (2, 24), (2, 44), (3, 5), (3, 26),
                         (3, 48), (4, 9), (4, 30), (4, 52), (5, 13), (5, 35),
                         (5, 56), (6, 17), (6, 39), (7, 0), (7, 21), (7, 42),
                         (8, 3), (8, 24), (8, 45), (9, 5), (9, 26), (9, 46),
                         (10, 5), (10, 25), (10, 44), (11, 3), (11, 22), (11, 40),
                         (11, 58), (12, 15), (12, 32), (12, 49), (13, 5), (13, 21),
                         (13, 36), (13, 51), (14, 5), (14, 18), (14, 31), (14, 44),
                         (14, 56), (15, 7), (15, 17), (15, 27), (15, 37), (15, 45),
                         (15, 53), (16, 0), (16, 6), (16, 12), (16, 17), (16, 21),
                         (16, 24), (16, 27), (16, 29), (16, 29), (16, 30), (16, 29),
                         (16, 27), (16, 25), (16, 21), (16, 17), (16, 12), (16, 6),
                         (15, 60), (15, 52), (15, 44), (15, 34), (15, 24), (15, 13),
                         (15, 1), (14, 49), (14, 35), (14, 21), (14, 6), (13, 50),
                         (13, 33), (13, 15), (12, 57), (12, 38), (12, 18), (11, 58),
                         (11, 37), (11, 15), (10, 53), (10, 29), (10, 6), (9, 42),
                         (9, 17), (8, 51), (8, 26), (7, 59), (7, 32), (7, 5),
                         (6, 38), (6, 10), (5, 42), (5, 13), (4, 44), (4, 15),
                         (3, 46), (3, 17), (2, 47), (2, 17), (1, 48), (1, 18),
                         (0, 48), (0, 18), (0, -11), (0, -41), (-1, 10), (-1, 40),
                         (-2, 9), (-2, 38), (-3, 6));

function GetEquationTimeofDay(ADate: TDate; out AMinutes: ShortInt; ASeconds: ShortInt): ShortInt;


implementation

function GetEquationTimeofDay(ADate: TDate; out AMinutes: ShortInt; ASeconds: ShortInt): ShortInt;
begin
  var LDayOfYear := DayOfTheYear(ADate) - 1; // Change Day of year to zero index for array lookup

  AMinutes :=  EquationOfTimeData[LDayOfYear, 0];
  ASeconds :=  EquationOfTimeData[LDayOfYear, 1];

  // Check for leap year
  if IsLeapYear(LYear) then
  begin
    if LDayOfYear < 59 then
    begin
      AMinutes :=  EquationOfTimeData[LDayOfYear, 0];
      ASeconds :=  EquationOfTimeData[LDayOfYear, 1];
    end
    else if 59 = LDayOfYear then // Feb 29
    begin
      AMinutes := -12;
      ASeconds := 16;
    end
    else
    begin
      AMinutes :=  EquationOfTimeData[LDayOfYear - 1, 0];
      ASeconds :=  EquationOfTimeData[LDayOfYear - 1, 1];
    end;
  end
  Result := if (AMinutes < 0) then (AMinutes * 60) - ASeconds else (AMinutes * 60) + ASeconds;
end;

end.
